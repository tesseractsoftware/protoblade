# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest",  "windows-latest" ]
        python-version: [ "3.8", "3.9","3.10", ]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
 
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
           poetry config virtualenvs.prefer-active-python  true 
           poetry install --no-interaction --no-root
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
    - name: Run Non-Windows tests
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        pytest --cov=./src/protoblade --cov-report=xml tests/
        cd examples/axial_turbine 
        python -m protoblade axial_turbine.toml
    - name: Run Windows tests
      if: runner.os == 'Windows'
      run: |
        source .venv/scripts/activate
        pytest --cov=./src/protoblade --cov-report=xml tests/ 
        cd examples\axial_turbine
        python -m protoblade axial_turbine.toml
      #-----------------------------------------------
      #      upload to codecov 
      #-----------------------------------------------
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true 
